name: Build and Release

on:
  push:
    tags: ["v*"]
    branches: [master]
  workflow_dispatch:

env:
  CUDA_VERSION: "11.8.0"
  PYTHON_VERSION: "3.10"
  BUILD_TYPE: "Release"

jobs:
  build:
    runs-on: windows-latest

    env:
      CUDA_PATH: 'C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      - name: Cache CUDA and VC++ Runtime
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            deps
            C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8\bin
          key: ${{ runner.os }}-cuda-${{ env.CUDA_VERSION }}-vc-2022

      - name: Install CUDA Toolkit
        if: steps.cache-deps.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://developer.download.nvidia.com/compute/cuda/${{ env.CUDA_VERSION }}/local_installers/cuda_${{ env.CUDA_VERSION }}_522.06_windows.exe" -OutFile "cuda_installer.exe"
          Start-Process -FilePath "cuda_installer.exe" -ArgumentList "/s","/n" -Wait -NoNewWindow
          Remove-Item "cuda_installer.exe"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt --no-cache-dir
          pip install pyinstaller --no-cache-dir

      - name: Setup Build Version
        id: version
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -match '^refs/tags/v') {
            $ver = $env:GITHUB_REF -replace '^refs/tags/v', ''
          } else {
            $ver = "dev-$(git rev-parse --short HEAD)"
          }
          "version=$ver" >> $env:GITHUB_OUTPUT
          "VERSION=$ver" >> $env:GITHUB_ENV

      - name: Prepare Dependencies Directory
        run: |
          mkdir deps -ErrorAction SilentlyContinue
          robocopy "${{ env.CUDA_PATH }}\bin" "deps" "cusolver64_*.dll" "cudart64_*.dll" "cufft64_*.dll" /NFL /NDL /NJH /NJS /nc /ns /np
          robocopy "C:\Windows\System32" "deps" "msvcp140.dll" "vcruntime140.dll" "vcruntime140_1.dll" /NFL /NDL /NJH /NJS /nc /ns /np
        continue-on-error: true

      - name: Build Executable
        run: python build_app.py

      - name: Package Release
        shell: pwsh
        run: |
          $packageDir = "VideoScanner-${{ steps.version.outputs.version }}"
          New-Item -ItemType Directory -Path $packageDir

          # Copy files
          Copy-Item "dist\VideoScanner.exe", "README.md", "deps\*" -Destination $packageDir

          # Create launcher
          @"
          @echo off
          echo Starting Video Scanner...
          start VideoScanner.exe %*
          "@ | Set-Content "$packageDir\Launch_VideoScanner.bat"

          # Create ZIP
          Compress-Archive -Path $packageDir\* -DestinationPath "$packageDir.zip" -Force

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.version }}
          files: VideoScanner-${{ steps.version.outputs.version }}.zip
          body: |
            Video Scanner ${{ steps.version.outputs.version }}

            ### ðŸš€ Features
            * Standalone executable - no installation needed
            * CUDA ${{ env.CUDA_VERSION }} support included
            * Visual C++ Runtime included

            ### ðŸ“¥ Installation
            1. Download and extract the ZIP
            2. Run `Launch_VideoScanner.bat`
            3. Drag & drop video files to analyze

            ### ðŸ’» Requirements
            * Windows 10/11 64-bit
            * NVIDIA GPU (optional)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Build Artifact
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/upload-artifact@v3
        with:
          name: VideoScanner-${{ steps.version.outputs.version }}
          path: VideoScanner-${{ steps.version.outputs.version }}.zip
          retention-days: 7
