name: Build and Release

on:
  push:
    tags: ["v*"]
    branches: [master]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Get Version Info
        id: version_info
        shell: pwsh
        run: |
          # Get version number
          $ver = if ($env:GITHUB_REF -match '^refs/tags/v') {
            $env:GITHUB_REF -replace '^refs/tags/v', ''
          } else {
            "dev-$(git rev-parse --short HEAD)"
          }
          echo "version=$ver" >> $env:GITHUB_OUTPUT

          # Get tag message if available
          if ($env:GITHUB_REF -match '^refs/tags/') {
            $tag_msg = git tag -l --format='%(contents)' "$($env:GITHUB_REF -replace '^refs/tags/', '')"
            echo "tag_message=$tag_msg" >> $env:GITHUB_OUTPUT
          }

          # Get changes since last release
          $changes = if ($env:GITHUB_REF -match '^refs/tags/') {
            $prev_tag = git describe --abbrev=0 --tags HEAD^ 2>$null
            if ($prev_tag) {
              git log --pretty=format:"* %s" "$prev_tag..HEAD"
            } else {
              git log --pretty=format:"* %s" HEAD
            }
          } else {
            "Development build"
          }
          $changes = $changes -join "`n"
          echo "changes<<EOF" >> $env:GITHUB_OUTPUT
          echo "$changes" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      - name: Build Executable
        shell: pwsh
        run: |
          $PyInstallerArgs = @(
            '--onefile',
            '--windowed',
            '--clean',
            '--name', 'VideoScanner',
            '--add-binary', 'C:\Windows\System32\msvcp140.dll;.',
            '--add-binary', 'C:\Windows\System32\vcruntime140.dll;.',
            '--hidden-import', 'torch',
            '--hidden-import', 'torch.cuda',
            '--hidden-import', 'torch.backends.cuda',
            '--hidden-import', 'numpy',
            '--hidden-import', 'numpy.core',
            '--hidden-import', 'numpy.random',
            '--hidden-import', 'cv2',
            '--hidden-import', 'moviepy.editor',
            '--hidden-import', 'PIL',
            '--hidden-import', 'PIL._tkinter_finder',
            '--hidden-import', 'numpy.random.common',
            '--hidden-import', 'numpy.random.bounded_integers',
            '--hidden-import', 'numpy.random.entropy',
            '--collect-submodules', 'torch',
            '--collect-submodules', 'numpy',
            '--collect-submodules', 'cv2',
            '--collect-submodules', 'moviepy',
            '--collect-submodules', 'colorama',
            '--collect-submodules', 'tqdm',
            '--paths', (Get-Location).Path,
            '--additional-hooks-dir', 'hooks',
            '--exclude-module', 'tkinter',
            '--exclude-module', 'pandas',
            '--exclude-module', 'matplotlib',
            'main.py'
          )

          # Create hooks directory and torch hook
          mkdir hooks -ErrorAction SilentlyContinue
          @"
          from PyInstaller.utils.hooks import collect_all, collect_submodules

          # Collect all torch submodules
          hiddenimports = collect_submodules('torch')
          datas = []
          binaries = []

          # Add CUDA DLLs
          import os
          import glob

          # Collect CUDA DLLs from torch installation
          import torch
          torch_path = os.path.dirname(torch.__file__)
          cuda_dlls = glob.glob(os.path.join(torch_path, 'lib', '*.dll'))
          for dll in cuda_dlls:
              binaries.append((dll, '.'))

          # Add additional torch data files
          torch_libs = os.path.join(torch_path, 'lib')
          if os.path.exists(torch_libs):
              datas.append((torch_libs, 'torch/lib'))
          "@ | Set-Content "hooks/hook-torch.py"

          # Create numpy hook
          @"
          from PyInstaller.utils.hooks import collect_data_files, collect_submodules

          hiddenimports = collect_submodules('numpy')
          datas = collect_data_files('numpy')
          "@ | Set-Content "hooks/hook-numpy.py"

          Write-Host "PyInstaller Arguments:"
          Write-Host ($PyInstallerArgs -join "`n")
          
          & python -m PyInstaller $PyInstallerArgs

          if ($LASTEXITCODE -ne 0) {
              Write-Error "PyInstaller failed with exit code $LASTEXITCODE"
              exit $LASTEXITCODE
          }

      - name: Create Release Package
        shell: pwsh
        run: |
          $packageDir = "VideoScanner-${{ steps.version_info.outputs.version }}"
          New-Item -ItemType Directory -Path $packageDir
          Copy-Item "dist\VideoScanner.exe", "README.md" -Destination $packageDir

          # Create enhanced launcher
          @"
          @echo off
          echo Starting Video Scanner...
          echo GPU support will be automatically detected
          start /wait VideoScanner.exe %*
          if errorlevel 1 (
              echo.
              echo An error occurred. Press any key to exit...
              pause >nul
          )
          "@ | Set-Content "$packageDir\Launch_VideoScanner.bat"

          # Create ZIP
          Compress-Archive -Path $packageDir\* -DestinationPath "$packageDir.zip" -Force

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version_info.outputs.version }}
          files: VideoScanner-${{ steps.version_info.outputs.version }}.zip
          body: |
            Video Scanner ${{ steps.version_info.outputs.version }}

            ### Release Notes
            ${{ steps.version_info.outputs.tag_message }}

            ### Changes
            ${{ steps.version_info.outputs.changes }}

            ### Installation
            1. Download and extract ZIP
            2. Run `Launch_VideoScanner.bat`
            3. Drag & drop video files to analyze

            ### System Requirements
            * Windows 10/11 64-bit
            * NVIDIA GPU (optional)

      - name: Upload Development Build
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/upload-artifact@v3
        with:
          name: VideoScanner-${{ steps.version_info.outputs.version }}
          path: VideoScanner-${{ steps.version_info.outputs.version }}.zip
          retention-days: 7
