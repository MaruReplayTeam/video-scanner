name: Build and Release

on:
  push:
    tags: ["v*"]
    branches: [master]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install Base Dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install numpy==2.0.2

      - name: Install PyTorch with CUDA
        run: |
          pip install torch==2.5.1+cu118 --extra-index-url https://download.pytorch.org/whl/cu118

      - name: Install OpenCV
        run: |
          pip install opencv-python==4.10.0.84

      - name: Install Other Dependencies
        run: |
          pip install -r requirements.txt
          pip install pyinstaller==6.11.1
          pip install moviepy==2.1.1

      - name: Configure CUDA Environment
        shell: pwsh
        run: |
          $Env:CUDA_PATH = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8"
          $Env:PATH = "$Env:CUDA_PATH\bin;$Env:PATH"

          # Verify CUDA setup
          if (Test-Path $Env:CUDA_PATH) {
              Write-Host "CUDA PATH set to: $Env:CUDA_PATH"
              Get-ChildItem "$Env:CUDA_PATH\bin\*.dll" | ForEach-Object { Write-Host "Found CUDA DLL: $($_.Name)" }
          } else {
              Write-Warning "CUDA PATH not found"
          }

      - name: Get Version Info
        id: version_info
        shell: pwsh
        run: |
          # Get version number
          $ver = if ($env:GITHUB_REF -match '^refs/tags/v') {
            $env:GITHUB_REF -replace '^refs/tags/v', ''
          } else {
            "dev-$(git rev-parse --short HEAD)"
          }
          echo "version=$ver" >> $env:GITHUB_OUTPUT

          # Get tag message if available
          if ($env:GITHUB_REF -match '^refs/tags/') {
            $tag_msg = git tag -l --format='%(contents)' "$($env:GITHUB_REF -replace '^refs/tags/', '')"
            echo "tag_message=$tag_msg" >> $env:GITHUB_OUTPUT
          }

          # Get changes since last release
          $changes = if ($env:GITHUB_REF -match '^refs/tags/') {
            $prev_tag = git describe --abbrev=0 --tags HEAD^ 2>$null
            if ($prev_tag) {
              git log --pretty=format:"* %s" "$prev_tag..HEAD"
            } else {
              git log --pretty=format:"* %s" HEAD
            }
          } else {
            "Development build"
          }
          $changes = $changes -join "`n"
          echo "changes<<EOF" >> $env:GITHUB_OUTPUT
          echo "$changes" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      - name: Build Executable
        shell: pwsh
        run: |
          # Create the spec file
          @"
          # -*- mode: python ; coding: utf-8 -*-
          import sys
          from PyInstaller.utils.hooks import collect_dynamic_libs

          block_cipher = None
          binaries = []

          # Collect CUDA DLLs
          cuda_dlls = collect_dynamic_libs('torch')
          binaries.extend(cuda_dlls)

          a = Analysis(
              ['main.py'],
              pathex=[r'${PWD}'.replace('\\', '\\\\')],
              binaries=binaries,
              datas=[],
              hiddenimports=[
                  'torch',
                  'torch.cuda',
                  'moviepy.editor',
                  'numpy',
                  'cv2',
                  'colorama',
                  'PIL',
                  'tqdm'
              ],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=['matplotlib', 'pandas', 'tkinter'],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )

          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name='VideoScanner',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              upx_exclude=[],
              runtime_tmpdir=None,
              console=False,
              disable_windowed_traceback=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          "@ | Set-Content "VideoScanner.spec"

          # Run PyInstaller with spec file
          pyinstaller VideoScanner.spec

      - name: Install 7-Zip
        run: choco install 7zip.install -y

      - name: Create Release Package
        shell: pwsh
        run: |
          $packageDir = "VideoScanner-${{ steps.version_info.outputs.version }}"
          New-Item -ItemType Directory -Path $packageDir

          # Copy files
          Copy-Item "dist\VideoScanner.exe", "README.md" -Destination $packageDir

          # Copy Visual C++ Runtime
          Copy-Item "C:\Windows\System32\msvcp140.dll", "C:\Windows\System32\vcruntime140.dll" -Destination $packageDir

          # Create launcher
          @"
          @echo off
          echo Starting Video Scanner...
          start /wait VideoScanner.exe %*
          if errorlevel 1 (
              echo Error occurred! Press any key...
              pause >nul
          )
          "@ | Set-Content "$packageDir\Run_VideoScanner.bat"

          # Create ZIP using 7-Zip
          $zipPath = "$packageDir.zip"
          $7zPath = "C:\Program Files\7-Zip\7z.exe"

          Write-Host "Creating ZIP archive using 7-Zip..."
          & $7zPath a -tzip $zipPath "$packageDir\*"

          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to create ZIP archive"
              exit 1
          }

          Write-Host "ZIP archive created successfully"

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version_info.outputs.version }}
          files: VideoScanner-${{ steps.version_info.outputs.version }}.zip
          body: |
            Video Scanner ${{ steps.version_info.outputs.version }}

            ### Release Notes
            ${{ steps.version_info.outputs.tag_message }}

            ### Changes
            ${{ steps.version_info.outputs.changes }}

            ### Installation
            1. Download and extract ZIP
            2. Run `Launch_VideoScanner.bat`
            3. Drag & drop video files to analyze

            ### System Requirements
            * Windows 10/11 64-bit
            * NVIDIA GPU (optional)

      - name: Upload Development Build
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/upload-artifact@v3
        with:
          name: VideoScanner-${{ steps.version_info.outputs.version }}
          path: VideoScanner-${{ steps.version_info.outputs.version }}.zip
          retention-days: 7
