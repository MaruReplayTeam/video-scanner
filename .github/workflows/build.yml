name: Build and Release

on:
  push:
    tags: ["v*"]
    branches: [master]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install PyTorch
        run: |
          pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

      - name: Install Other Dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install --no-cache-dir -r requirements.txt
          pip install --no-cache-dir pyinstaller

      - name: Verify Dependencies
        shell: pwsh
        run: |
          python -c "import torch; print(f'PyTorch version: {torch.__version__}')"
          python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
          python -c "import cv2; print(f'OpenCV version: {cv2.__version__}')"

      - name: Get Version Info
        id: version_info
        shell: pwsh
        run: |
          # Get version number
          $ver = if ($env:GITHUB_REF -match '^refs/tags/v') {
            $env:GITHUB_REF -replace '^refs/tags/v', ''
          } else {
            "dev-$(git rev-parse --short HEAD)"
          }
          echo "version=$ver" >> $env:GITHUB_OUTPUT

          # Get tag message if available
          if ($env:GITHUB_REF -match '^refs/tags/') {
            $tag_msg = git tag -l --format='%(contents)' "$($env:GITHUB_REF -replace '^refs/tags/', '')"
            echo "tag_message=$tag_msg" >> $env:GITHUB_OUTPUT
          }

          # Get changes since last release
          $changes = if ($env:GITHUB_REF -match '^refs/tags/') {
            $prev_tag = git describe --abbrev=0 --tags HEAD^ 2>$null
            if ($prev_tag) {
              git log --pretty=format:"* %s" "$prev_tag..HEAD"
            } else {
              git log --pretty=format:"* %s" HEAD
            }
          } else {
            "Development build"
          }
          $changes = $changes -join "`n"
          echo "changes<<EOF" >> $env:GITHUB_OUTPUT
          echo "$changes" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      - name: Build Executable
        shell: pwsh
        run: |
          # Create runtime dependency collector
          mkdir tools -ErrorAction SilentlyContinue
          @"
          import os
          import shutil
          import sys
          from pathlib import Path

          def collect_runtime_deps():
              deps_dir = Path('runtime_deps')
              deps_dir.mkdir(exist_ok=True)
              
              # Essential DLLs
              system_dlls = [
                  'msvcp140.dll',
                  'vcruntime140.dll',
                  'vcruntime140_1.dll',
                  'concrt140.dll',
              ]
              
              # Copy system DLLs
              for dll in system_dlls:
                  src = Path(r'C:\Windows\System32') / dll
                  if src.exists():
                      shutil.copy2(src, deps_dir)
              
              # Get CUDA DLLs from torch
              import torch
              torch_path = Path(torch.__file__).parent
              cuda_dlls = torch_path.glob('lib/*.dll')
              for dll in cuda_dlls:
                  shutil.copy2(dll, deps_dir)
              
              # Get OpenCV DLLs
              import cv2
              cv2_path = Path(cv2.__file__).parent
              cv2_dlls = cv2_path.glob('*.dll')
              for dll in cv2_dlls:
                  shutil.copy2(dll, deps_dir)
              
              return deps_dir

          if __name__ == '__main__': 
              deps = collect_runtime_deps()
              print(f'Collected dependencies in: {deps}')
          "@ | Set-Content "tools/collect_deps.py"

          # Collect runtime dependencies
          python tools/collect_deps.py

          # Build with collected dependencies
          $PyInstallerArgs = @(
            '--onefile',
            '--windowed',
            '--clean',
            '--name', 'VideoScanner',
            '--add-data', 'runtime_deps/*;.',
            '--hidden-import', 'torch',
            '--hidden-import', 'numpy',
            '--hidden-import', 'cv2',
            '--hidden-import', 'moviepy.editor',
            '--hidden-import', 'colorama',
            '--paths', (Get-Location).Path,
            '--exclude-module', 'matplotlib',
            '--exclude-module', 'pandas',
            '--exclude-module', 'tkinter',
            'main.py'
          )

          Write-Host "Building standalone executable..."
          & python -m PyInstaller $PyInstallerArgs

      - name: Create Release Package
        shell: pwsh
        run: |
          $packageDir = "VideoScanner-${{ steps.version_info.outputs.version }}"
          New-Item -ItemType Directory -Path $packageDir

          # Copy executable and essential files
          Copy-Item "dist\VideoScanner.exe", "README.md" -Destination $packageDir

          # Create minimal launcher
          @"
          @echo off
          echo Video Scanner - Running...
          start /wait VideoScanner.exe %*
          if errorlevel 1 (
              echo Error occurred. Press any key...
              pause >nul
          )
          "@ | Set-Content "$packageDir\Launch_VideoScanner.bat"

          # Create ZIP
          Compress-Archive -Path $packageDir\* -DestinationPath "$packageDir.zip" -Force

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version_info.outputs.version }}
          files: VideoScanner-${{ steps.version_info.outputs.version }}.zip
          body: |
            Video Scanner ${{ steps.version_info.outputs.version }}

            ### Release Notes
            ${{ steps.version_info.outputs.tag_message }}

            ### Changes
            ${{ steps.version_info.outputs.changes }}

            ### Installation
            1. Download and extract ZIP
            2. Run `Launch_VideoScanner.bat`
            3. Drag & drop video files to analyze

            ### System Requirements
            * Windows 10/11 64-bit
            * NVIDIA GPU (optional)

      - name: Upload Development Build
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/upload-artifact@v3
        with:
          name: VideoScanner-${{ steps.version_info.outputs.version }}
          path: VideoScanner-${{ steps.version_info.outputs.version }}.zip
          retention-days: 7
