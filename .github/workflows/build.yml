name: Build and Release

on:
  push:
    tags:
      - "v*" # Trigger on version tags
    branches:
      - main # Trigger on main branch updates
  workflow_dispatch: # Allow manual trigger

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      # Add CUDA Toolkit installation
      - name: Install CUDA
        shell: powershell
        run: |
          $cuda_url = "https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda_11.8.0_522.06_windows.exe"
          $cuda_installer = "cuda_installer.exe"
          Invoke-WebRequest -Uri $cuda_url -OutFile $cuda_installer
          Start-Process -FilePath $cuda_installer -ArgumentList "/s","/n" -Wait
          Remove-Item $cuda_installer
          $env:PATH = "$env:PATH;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8\bin"
          echo "CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8" >> $env:GITHUB_ENV

      # Install Visual C++ Redistributable
      - name: Install VC++ Redistributable
        shell: powershell
        run: |
          $vcredist_url = "https://aka.ms/vs/17/release/vc_redist.x64.exe"
          $vcredist_installer = "vc_redist.exe"
          Invoke-WebRequest -Uri $vcredist_url -OutFile $vcredist_installer
          Start-Process -FilePath $vcredist_installer -ArgumentList "/install","/quiet","/norestart" -Wait
          Remove-Item $vcredist_installer

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Get version
        id: get_version
        run: |
          $version = if ($env:GITHUB_REF -match '^refs/tags/v') { 
            $env:GITHUB_REF -replace '^refs/tags/v', '' 
          } else { 
            "dev-$($env:GITHUB_SHA.Substring(0, 7))" 
          }
          echo "version=$version" >> $env:GITHUB_OUTPUT
        shell: pwsh

      # Collect all necessary DLLs and dependencies
      - name: Prepare dependencies
        shell: powershell
        run: |
          # Create deps directory
          mkdir deps
          # Copy CUDA DLLs
          Copy-Item "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8\bin\*.dll" deps/
          # Copy VC++ Runtime DLLs
          Copy-Item "C:\Windows\System32\msvcp140.dll" deps/
          Copy-Item "C:\Windows\System32\vcruntime140.dll" deps/
          Copy-Item "C:\Windows\System32\vcruntime140_1.dll" deps/

      - name: Build executable
        run: |
          # Modify build_app.py to include all DLLs
          python build_app.py
        env:
          VERSION: ${{ steps.get_version.outputs.version }}

      # Create distribution package
      - name: Create distribution package
        shell: powershell
        run: |
          mkdir release
          Copy-Item "dist\VideoScanner.exe" release/
          Copy-Item "deps\*" release/
          Copy-Item "README.md" release/
          # Create batch launcher
          Set-Content -Path "release\Launch_VideoScanner.bat" -Value @"
          @echo off
          echo Starting Video Scanner...
          start VideoScanner.exe %*
          "@
          # Create zip archive
          Compress-Archive -Path release\* -DestinationPath VideoScanner-${{ steps.get_version.outputs.version }}.zip

      - name: Create Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            VideoScanner-${{ steps.get_version.outputs.version }}.zip
          body: |
            Video Scanner Release ${{ steps.get_version.outputs.version }}

            ## What's Changed
            * Automatic build from tag ${{ github.ref_name }}
            * All dependencies included - no additional installation required
            * CUDA 11.8 runtime included
            * VC++ Runtime included

            ## How to Install
            1. Download and extract VideoScanner-${{ steps.get_version.outputs.version }}.zip
            2. Run Launch_VideoScanner.bat
            3. Drag and drop video files onto the application

            ## System Requirements
            * Windows 10 64-bit or later
            * NVIDIA GPU (optional, for GPU acceleration)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/upload-artifact@v3
        with:
          name: VideoScanner-${{ steps.get_version.outputs.version }}
          path: VideoScanner-${{ steps.get_version.outputs.version }}.zip
